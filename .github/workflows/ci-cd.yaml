name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Install dependencies (kubectl, curl)
      - name: Install kubectl
        run: |
          set -e
          curl -LO "https://dl.k8s.io/release/v1.28.2/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          kubectl version --client

      # Step 3: Install Tracetest CLI
      - name: Install Tracetest CLI
        run: |
          curl -sL https://raw.githubusercontent.com/kubeshop/tracetest/main/install-cli.sh | bash

      # Step 4: Configure Tracetest CLI
      - name: Configure Tracetest CLI
        run: |
          tracetest configure --server-url "http://54.90.203.241:11633"

      # Step 5: Verify Tracetest CLI
      - name: Verify Tracetest CLI and Server
        run: |
          tracetest version

      # Step 6: Configure AWS CLI
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Step 7: Update kubeconfig for EKS
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region us-east-1 --name otel-demo

      # Step 8: Apply Namespace YAML
      - name: Apply Namespace
        run: |
            kubectl apply -f ./opentelemetry-split/Namespaces/namespaces_1.yaml

      # Step 9: Deploy Application
      - name: Deploy Application
        run: |
          kubectl apply -R -f ./opentelemetry-split/

      # Step 10: Run Trace-Based Tests
      - name: Run Trace-Based Tests
        working-directory: test/tracetesting
        run: |
          chmod +x run.bash
          ./run.bash

      # Step 11: Rollback on Failure
      - name: Rollback on Failure
        if: failure()
        run: |
          for deployment in $(kubectl get deployments -n otel-demo -o jsonpath='{.items[*].metadata.name}'); do
            kubectl rollout undo deployment/$deployment -n otel-demo || echo "No rollback history for deployment $deployment. Skipping."
          done

      # Step 12: Display Success Message
      - name: Display Success Message
        if: success()
        run: echo "CI/CD pipeline executed successfully!"
