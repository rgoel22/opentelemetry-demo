name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Install dependencies (kubectl, curl)
      - name: Install kubectl
        run: |
          set -e
          echo "Installing kubectl..."
          curl -LO "https://dl.k8s.io/release/v1.28.2/bin/linux/amd64/kubectl" || { echo "Failed to download kubectl"; exit 1; }
          chmod +x kubectl || { echo "Failed to make kubectl executable"; exit 1; }
          sudo mv kubectl /usr/local/bin/ || { echo "Failed to move kubectl to /usr/local/bin"; exit 1; }
          kubectl version --client || { echo "Failed to verify kubectl installation"; exit 1; }

      # Step 3: Install Tracetest CLI
      - name: Install Tracetest CLI
        run: |
          echo "Installing Tracetest CLI..."
          curl -sL https://raw.githubusercontent.com/kubeshop/tracetest/main/install-cli.sh | bash || { echo "Failed to install Tracetest CLI"; exit 1; }

      # Step 4: Configure Tracetest CLI
      - name: Configure Tracetest CLI
        run: |
          echo "Configuring Tracetest CLI..."
          tracetest configure --endpoint "http://<your-server-endpoint>" || { echo "Failed to configure Tracetest CLI"; exit 1; }

      # Step 5: Verify Tracetest CLI
      - name: Verify Tracetest CLI and Server
        run: |
          tracetest version || { echo "Failed to verify Tracetest CLI and server version compatibility"; exit 1; }

      # Step 6: Configure AWS CLI
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Step 7: Update kubeconfig for EKS
      - name: Update kubeconfig
        run: |
          echo "Configuring kubeconfig for EKS cluster..."
          aws eks update-kubeconfig --region us-east-1 --name otel-demo || { echo "Failed to configure kubeconfig"; exit 1; }

      # Step 8: Deploy Application
      - name: Deploy Application
        run: |
          echo "Deploying application resources..."
          kubectl apply -R -f ./opentelemetry-split/ || { echo "Failed to deploy resources"; exit 1; }

      # Step 9: Run Trace-Based Tests
      - name: Run Trace-Based Tests
        working-directory: test/tracetesting
        run: |
          echo "Running trace-based tests..."
          chmod +x run.bash || { echo "Failed to make run.bash executable"; exit 1; }
          ./run.bash || { echo "Trace-based tests failed"; exit 1; }

      # Step 10: Rollback on Failure
      - name: Rollback on Failure
        if: failure()
        run: |
          echo "Rolling back deployments due to failure..."
          for deployment in $(kubectl get deployments -n otel-demo -o jsonpath='{.items[*].metadata.name}'); do
            echo "Rolling back deployment: $deployment"
            kubectl rollout undo deployment/$deployment -n otel-demo || echo "No rollback history for deployment $deployment. Skipping."
          done

      # Step 11: Display Success Message
      - name: Display Success Message
        if: success()
        run: echo "CI/CD pipeline executed successfully!"
