name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Install SSH Client
      - name: Install SSH Client
        run: sudo apt-get update && sudo apt-get install -y openssh-client

      # Step 3: Deploy Main Application to EC2
      - name: Deploy Main Application
        env:
          EC2_HOST: "100.27.230.121"  # Replace with your EC2 instance's public IP or DNS
          SSH_USER: "ec2-user"        # Replace with the username for your EC2 instance
        run: |
          # Add the SSH private key from GitHub Secrets
          echo "${{ secrets.EC2_SSH_KEY }}" > ssh_key.pem
          chmod 600 ssh_key.pem

          # SSH into EC2 and deploy the main application
          ssh -o StrictHostKeyChecking=no -i ssh_key.pem $SSH_USER@$EC2_HOST << EOF
            # Update the instance
            sudo yum update -y
          
            # Ensure Docker is installed and running
            if ! [ -x "$(command -v docker)" ]; then
              sudo amazon-linux-extras enable docker
              sudo yum install -y docker
              sudo systemctl start docker
              sudo systemctl enable docker
            fi

            # Navigate to the application directory or clone if not present
            if [ ! -d "~/opentelemetry-demo" ]; then
              git clone https://github.com/rgoel22/opentelemetry-demo.git ~/opentelemetry-demo
            fi
            cd ~/opentelemetry-demo

            # Pull latest changes
            git reset --hard
            git pull origin main

            # Deploy the new application version
            docker compose -f docker-compose.yml pull
            docker compose -f docker-compose.yml up -d
          EOF

      # Step 4: Run Trace-Based Tests
      - name: Run Trace-Based Tests
        env:
          EC2_HOST: "100.27.230.121"
          SSH_USER: "ec2-user"
        run: |
          # SSH into EC2 and run tests
          ssh -o StrictHostKeyChecking=no -i ssh_key.pem $SSH_USER@$EC2_HOST << EOF
            # Navigate to the test directory
            cd ~/opentelemetry-demo
          
            # Deploy the test environment using docker-compose-tests.yml
            docker compose -f docker-compose-tests.yml up -d
          
            # Run trace-based tests
            cd test/tracetesting
            make run-tracetesting
          
            # Bring down the test environment after running tests
            docker compose -f docker-compose-tests.yml down
          EOF

      # Step 5: Rollback on Failure
      - name: Rollback on Failure
        if: failure()
        env:
          EC2_HOST: "100.27.230.121"
          SSH_USER: "ec2-user"
        run: |
          echo "Deployment failed. Rolling back to the previous stable version..."
          ssh -o StrictHostKeyChecking=no -i ssh_key.pem $SSH_USER@$EC2_HOST << EOF
            cd ~/opentelemetry-demo
            # Bring down current deployment
            docker compose -f docker-compose.yml down

            # Restore previous stable version if available
            git reset --hard HEAD~1
            docker compose -f docker-compose.yml up -d --build
          EOF
